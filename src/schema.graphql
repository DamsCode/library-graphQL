type Query {
    FeedBooks(filter: String, skip: Int, first: Int, orderBy: BookOrderByInput):FeedBooks!
    getProfile:User!
}

type Mutation{
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    borrow(idBook: ID!):Rent!
    addcomment(idBook: ID!,title: String, comment: String!, bookeval: Int): Comment!
    addvote(idComment:ID!,usefull: Boolean!):Vote!
    addbook(isbn: String!,title: String!, authors: [String!]!, editor:String!, format: String!, language: String!, cover: String):Book!
    bookcomeback(idRent: ID!):Rent!
}

type AuthPayload {
    token: String
    user: User
}

type FeedBooks{
    books: [Book!]!
    count: Int!
}

type Book{
    id: ID!
    isbn: String!
    title: String!
    authors: [String!]!
    editor:String!
    format: String!
    language:String!
    cover: String
    comments:[Comment!]
    rents: [Rent!]
}

enum BookOrderByInput {
    title_ASC
    title_DESC
    editor_ASC
    editor_DESC
    language_ASC
    language_DESC
}

scalar Date



type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    comments:[Comment!]!
    rents: [Rent!]!
}

type Comment{
    id: ID!
    title: String
    comment: String!
    bookeval: Int
    book: Book!
    user: User!
    votes: [Vote!]!
}

type Vote{
    id: ID!
    comment: Comment!
    user: User!
    usefull: Boolean
}


type Rent{
    id: ID!
    book: Book!
    user: User!
    rentAt: Date!
    backAt: Date
    isBack: Boolean!
}

