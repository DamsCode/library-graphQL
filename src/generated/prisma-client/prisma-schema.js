module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBook {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateRent {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Book {
  id: ID!
  isbn: String!
  title: String!
  authors: [String!]!
  editor: String!
  format: String!
  language: String!
  cover: String
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  rents(where: RentWhereInput, orderBy: RentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rent!]
}

type BookConnection {
  pageInfo: PageInfo!
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateauthorsInput {
  set: [String!]
}

input BookCreateInput {
  id: ID
  isbn: String!
  title: String!
  authors: BookCreateauthorsInput
  editor: String!
  format: String!
  language: String!
  cover: String
  comments: CommentCreateManyWithoutBookInput
  rents: RentCreateManyWithoutBookInput
}

input BookCreateOneWithoutCommentsInput {
  create: BookCreateWithoutCommentsInput
  connect: BookWhereUniqueInput
}

input BookCreateOneWithoutRentsInput {
  create: BookCreateWithoutRentsInput
  connect: BookWhereUniqueInput
}

input BookCreateWithoutCommentsInput {
  id: ID
  isbn: String!
  title: String!
  authors: BookCreateauthorsInput
  editor: String!
  format: String!
  language: String!
  cover: String
  rents: RentCreateManyWithoutBookInput
}

input BookCreateWithoutRentsInput {
  id: ID
  isbn: String!
  title: String!
  authors: BookCreateauthorsInput
  editor: String!
  format: String!
  language: String!
  cover: String
  comments: CommentCreateManyWithoutBookInput
}

type BookEdge {
  node: Book!
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  isbn_ASC
  isbn_DESC
  title_ASC
  title_DESC
  editor_ASC
  editor_DESC
  format_ASC
  format_DESC
  language_ASC
  language_DESC
  cover_ASC
  cover_DESC
}

type BookPreviousValues {
  id: ID!
  isbn: String!
  title: String!
  authors: [String!]!
  editor: String!
  format: String!
  language: String!
  cover: String
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookWhereInput
  AND: [BookSubscriptionWhereInput!]
  OR: [BookSubscriptionWhereInput!]
  NOT: [BookSubscriptionWhereInput!]
}

input BookUpdateauthorsInput {
  set: [String!]
}

input BookUpdateInput {
  isbn: String
  title: String
  authors: BookUpdateauthorsInput
  editor: String
  format: String
  language: String
  cover: String
  comments: CommentUpdateManyWithoutBookInput
  rents: RentUpdateManyWithoutBookInput
}

input BookUpdateManyMutationInput {
  isbn: String
  title: String
  authors: BookUpdateauthorsInput
  editor: String
  format: String
  language: String
  cover: String
}

input BookUpdateOneRequiredWithoutCommentsInput {
  create: BookCreateWithoutCommentsInput
  update: BookUpdateWithoutCommentsDataInput
  upsert: BookUpsertWithoutCommentsInput
  connect: BookWhereUniqueInput
}

input BookUpdateOneRequiredWithoutRentsInput {
  create: BookCreateWithoutRentsInput
  update: BookUpdateWithoutRentsDataInput
  upsert: BookUpsertWithoutRentsInput
  connect: BookWhereUniqueInput
}

input BookUpdateWithoutCommentsDataInput {
  isbn: String
  title: String
  authors: BookUpdateauthorsInput
  editor: String
  format: String
  language: String
  cover: String
  rents: RentUpdateManyWithoutBookInput
}

input BookUpdateWithoutRentsDataInput {
  isbn: String
  title: String
  authors: BookUpdateauthorsInput
  editor: String
  format: String
  language: String
  cover: String
  comments: CommentUpdateManyWithoutBookInput
}

input BookUpsertWithoutCommentsInput {
  update: BookUpdateWithoutCommentsDataInput!
  create: BookCreateWithoutCommentsInput!
}

input BookUpsertWithoutRentsInput {
  update: BookUpdateWithoutRentsDataInput!
  create: BookCreateWithoutRentsInput!
}

input BookWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isbn: String
  isbn_not: String
  isbn_in: [String!]
  isbn_not_in: [String!]
  isbn_lt: String
  isbn_lte: String
  isbn_gt: String
  isbn_gte: String
  isbn_contains: String
  isbn_not_contains: String
  isbn_starts_with: String
  isbn_not_starts_with: String
  isbn_ends_with: String
  isbn_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  editor: String
  editor_not: String
  editor_in: [String!]
  editor_not_in: [String!]
  editor_lt: String
  editor_lte: String
  editor_gt: String
  editor_gte: String
  editor_contains: String
  editor_not_contains: String
  editor_starts_with: String
  editor_not_starts_with: String
  editor_ends_with: String
  editor_not_ends_with: String
  format: String
  format_not: String
  format_in: [String!]
  format_not_in: [String!]
  format_lt: String
  format_lte: String
  format_gt: String
  format_gte: String
  format_contains: String
  format_not_contains: String
  format_starts_with: String
  format_not_starts_with: String
  format_ends_with: String
  format_not_ends_with: String
  language: String
  language_not: String
  language_in: [String!]
  language_not_in: [String!]
  language_lt: String
  language_lte: String
  language_gt: String
  language_gte: String
  language_contains: String
  language_not_contains: String
  language_starts_with: String
  language_not_starts_with: String
  language_ends_with: String
  language_not_ends_with: String
  cover: String
  cover_not: String
  cover_in: [String!]
  cover_not_in: [String!]
  cover_lt: String
  cover_lte: String
  cover_gt: String
  cover_gte: String
  cover_contains: String
  cover_not_contains: String
  cover_starts_with: String
  cover_not_starts_with: String
  cover_ends_with: String
  cover_not_ends_with: String
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  rents_every: RentWhereInput
  rents_some: RentWhereInput
  rents_none: RentWhereInput
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
}

input BookWhereUniqueInput {
  id: ID
}

type Comment {
  id: ID!
  title: String
  comment: String!
  bookeval: Int
  book: Book!
  user: User!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  title: String
  comment: String!
  bookeval: Int
  book: BookCreateOneWithoutCommentsInput!
  user: UserCreateOneWithoutCommentsInput!
  votes: VoteCreateManyWithoutCommentInput
}

input CommentCreateManyWithoutBookInput {
  create: [CommentCreateWithoutBookInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneWithoutVotesInput {
  create: CommentCreateWithoutVotesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutBookInput {
  id: ID
  title: String
  comment: String!
  bookeval: Int
  user: UserCreateOneWithoutCommentsInput!
  votes: VoteCreateManyWithoutCommentInput
}

input CommentCreateWithoutUserInput {
  id: ID
  title: String
  comment: String!
  bookeval: Int
  book: BookCreateOneWithoutCommentsInput!
  votes: VoteCreateManyWithoutCommentInput
}

input CommentCreateWithoutVotesInput {
  id: ID
  title: String
  comment: String!
  bookeval: Int
  book: BookCreateOneWithoutCommentsInput!
  user: UserCreateOneWithoutCommentsInput!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  comment_ASC
  comment_DESC
  bookeval_ASC
  bookeval_DESC
}

type CommentPreviousValues {
  id: ID!
  title: String
  comment: String!
  bookeval: Int
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  bookeval: Int
  bookeval_not: Int
  bookeval_in: [Int!]
  bookeval_not_in: [Int!]
  bookeval_lt: Int
  bookeval_lte: Int
  bookeval_gt: Int
  bookeval_gte: Int
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  title: String
  comment: String
  bookeval: Int
  book: BookUpdateOneRequiredWithoutCommentsInput
  user: UserUpdateOneRequiredWithoutCommentsInput
  votes: VoteUpdateManyWithoutCommentInput
}

input CommentUpdateManyDataInput {
  title: String
  comment: String
  bookeval: Int
}

input CommentUpdateManyMutationInput {
  title: String
  comment: String
  bookeval: Int
}

input CommentUpdateManyWithoutBookInput {
  create: [CommentCreateWithoutBookInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutBookInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutBookInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateOneRequiredWithoutVotesInput {
  create: CommentCreateWithoutVotesInput
  update: CommentUpdateWithoutVotesDataInput
  upsert: CommentUpsertWithoutVotesInput
  connect: CommentWhereUniqueInput
}

input CommentUpdateWithoutBookDataInput {
  title: String
  comment: String
  bookeval: Int
  user: UserUpdateOneRequiredWithoutCommentsInput
  votes: VoteUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutUserDataInput {
  title: String
  comment: String
  bookeval: Int
  book: BookUpdateOneRequiredWithoutCommentsInput
  votes: VoteUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutVotesDataInput {
  title: String
  comment: String
  bookeval: Int
  book: BookUpdateOneRequiredWithoutCommentsInput
  user: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutBookInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutBookDataInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpsertWithoutVotesInput {
  update: CommentUpdateWithoutVotesDataInput!
  create: CommentCreateWithoutVotesInput!
}

input CommentUpsertWithWhereUniqueWithoutBookInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutBookDataInput!
  create: CommentCreateWithoutBookInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  comment: String
  comment_not: String
  comment_in: [String!]
  comment_not_in: [String!]
  comment_lt: String
  comment_lte: String
  comment_gt: String
  comment_gte: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  bookeval: Int
  bookeval_not: Int
  bookeval_in: [Int!]
  bookeval_not_in: [Int!]
  bookeval_lt: Int
  bookeval_lte: Int
  bookeval_gt: Int
  bookeval_gte: Int
  book: BookWhereInput
  user: UserWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createBook(data: BookCreateInput!): Book!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createRent(data: RentCreateInput!): Rent!
  updateRent(data: RentUpdateInput!, where: RentWhereUniqueInput!): Rent
  updateManyRents(data: RentUpdateManyMutationInput!, where: RentWhereInput): BatchPayload!
  upsertRent(where: RentWhereUniqueInput!, create: RentCreateInput!, update: RentUpdateInput!): Rent!
  deleteRent(where: RentWhereUniqueInput!): Rent
  deleteManyRents(where: RentWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVote(data: VoteCreateInput!): Vote!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateManyVotes(data: VoteUpdateManyMutationInput!, where: VoteWhereInput): BatchPayload!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  book(where: BookWhereUniqueInput!): Book
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  rent(where: RentWhereUniqueInput!): Rent
  rents(where: RentWhereInput, orderBy: RentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rent]!
  rentsConnection(where: RentWhereInput, orderBy: RentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RentConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  node(id: ID!): Node
}

type Rent {
  id: ID!
  book: Book!
  user: User!
  rentAt: DateTime!
  backAt: DateTime
  isBack: Boolean
}

type RentConnection {
  pageInfo: PageInfo!
  edges: [RentEdge]!
  aggregate: AggregateRent!
}

input RentCreateInput {
  id: ID
  book: BookCreateOneWithoutRentsInput!
  user: UserCreateOneWithoutRentsInput!
  rentAt: DateTime!
  backAt: DateTime
  isBack: Boolean
}

input RentCreateManyWithoutBookInput {
  create: [RentCreateWithoutBookInput!]
  connect: [RentWhereUniqueInput!]
}

input RentCreateManyWithoutUserInput {
  create: [RentCreateWithoutUserInput!]
  connect: [RentWhereUniqueInput!]
}

input RentCreateWithoutBookInput {
  id: ID
  user: UserCreateOneWithoutRentsInput!
  rentAt: DateTime!
  backAt: DateTime
  isBack: Boolean
}

input RentCreateWithoutUserInput {
  id: ID
  book: BookCreateOneWithoutRentsInput!
  rentAt: DateTime!
  backAt: DateTime
  isBack: Boolean
}

type RentEdge {
  node: Rent!
  cursor: String!
}

enum RentOrderByInput {
  id_ASC
  id_DESC
  rentAt_ASC
  rentAt_DESC
  backAt_ASC
  backAt_DESC
  isBack_ASC
  isBack_DESC
}

type RentPreviousValues {
  id: ID!
  rentAt: DateTime!
  backAt: DateTime
  isBack: Boolean
}

input RentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  rentAt: DateTime
  rentAt_not: DateTime
  rentAt_in: [DateTime!]
  rentAt_not_in: [DateTime!]
  rentAt_lt: DateTime
  rentAt_lte: DateTime
  rentAt_gt: DateTime
  rentAt_gte: DateTime
  backAt: DateTime
  backAt_not: DateTime
  backAt_in: [DateTime!]
  backAt_not_in: [DateTime!]
  backAt_lt: DateTime
  backAt_lte: DateTime
  backAt_gt: DateTime
  backAt_gte: DateTime
  isBack: Boolean
  isBack_not: Boolean
  AND: [RentScalarWhereInput!]
  OR: [RentScalarWhereInput!]
  NOT: [RentScalarWhereInput!]
}

type RentSubscriptionPayload {
  mutation: MutationType!
  node: Rent
  updatedFields: [String!]
  previousValues: RentPreviousValues
}

input RentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RentWhereInput
  AND: [RentSubscriptionWhereInput!]
  OR: [RentSubscriptionWhereInput!]
  NOT: [RentSubscriptionWhereInput!]
}

input RentUpdateInput {
  book: BookUpdateOneRequiredWithoutRentsInput
  user: UserUpdateOneRequiredWithoutRentsInput
  rentAt: DateTime
  backAt: DateTime
  isBack: Boolean
}

input RentUpdateManyDataInput {
  rentAt: DateTime
  backAt: DateTime
  isBack: Boolean
}

input RentUpdateManyMutationInput {
  rentAt: DateTime
  backAt: DateTime
  isBack: Boolean
}

input RentUpdateManyWithoutBookInput {
  create: [RentCreateWithoutBookInput!]
  delete: [RentWhereUniqueInput!]
  connect: [RentWhereUniqueInput!]
  set: [RentWhereUniqueInput!]
  disconnect: [RentWhereUniqueInput!]
  update: [RentUpdateWithWhereUniqueWithoutBookInput!]
  upsert: [RentUpsertWithWhereUniqueWithoutBookInput!]
  deleteMany: [RentScalarWhereInput!]
  updateMany: [RentUpdateManyWithWhereNestedInput!]
}

input RentUpdateManyWithoutUserInput {
  create: [RentCreateWithoutUserInput!]
  delete: [RentWhereUniqueInput!]
  connect: [RentWhereUniqueInput!]
  set: [RentWhereUniqueInput!]
  disconnect: [RentWhereUniqueInput!]
  update: [RentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [RentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [RentScalarWhereInput!]
  updateMany: [RentUpdateManyWithWhereNestedInput!]
}

input RentUpdateManyWithWhereNestedInput {
  where: RentScalarWhereInput!
  data: RentUpdateManyDataInput!
}

input RentUpdateWithoutBookDataInput {
  user: UserUpdateOneRequiredWithoutRentsInput
  rentAt: DateTime
  backAt: DateTime
  isBack: Boolean
}

input RentUpdateWithoutUserDataInput {
  book: BookUpdateOneRequiredWithoutRentsInput
  rentAt: DateTime
  backAt: DateTime
  isBack: Boolean
}

input RentUpdateWithWhereUniqueWithoutBookInput {
  where: RentWhereUniqueInput!
  data: RentUpdateWithoutBookDataInput!
}

input RentUpdateWithWhereUniqueWithoutUserInput {
  where: RentWhereUniqueInput!
  data: RentUpdateWithoutUserDataInput!
}

input RentUpsertWithWhereUniqueWithoutBookInput {
  where: RentWhereUniqueInput!
  update: RentUpdateWithoutBookDataInput!
  create: RentCreateWithoutBookInput!
}

input RentUpsertWithWhereUniqueWithoutUserInput {
  where: RentWhereUniqueInput!
  update: RentUpdateWithoutUserDataInput!
  create: RentCreateWithoutUserInput!
}

input RentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  book: BookWhereInput
  user: UserWhereInput
  rentAt: DateTime
  rentAt_not: DateTime
  rentAt_in: [DateTime!]
  rentAt_not_in: [DateTime!]
  rentAt_lt: DateTime
  rentAt_lte: DateTime
  rentAt_gt: DateTime
  rentAt_gte: DateTime
  backAt: DateTime
  backAt_not: DateTime
  backAt_in: [DateTime!]
  backAt_not_in: [DateTime!]
  backAt_lt: DateTime
  backAt_lte: DateTime
  backAt_gt: DateTime
  backAt_gte: DateTime
  isBack: Boolean
  isBack_not: Boolean
  AND: [RentWhereInput!]
  OR: [RentWhereInput!]
  NOT: [RentWhereInput!]
}

input RentWhereUniqueInput {
  id: ID
}

type Subscription {
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  rent(where: RentSubscriptionWhereInput): RentSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  rents(where: RentWhereInput, orderBy: RentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rent!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  comments: CommentCreateManyWithoutUserInput
  rents: RentCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRentsInput {
  create: UserCreateWithoutRentsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  rents: RentCreateManyWithoutUserInput
}

input UserCreateWithoutRentsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  comments: CommentCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  comments: CommentUpdateManyWithoutUserInput
  rents: RentUpdateManyWithoutUserInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  comments: CommentUpdateManyWithoutUserInput
  rents: RentUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutRentsInput {
  create: UserCreateWithoutRentsInput
  update: UserUpdateWithoutRentsDataInput
  upsert: UserUpsertWithoutRentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCommentsDataInput {
  name: String
  email: String
  password: String
  rents: RentUpdateManyWithoutUserInput
}

input UserUpdateWithoutRentsDataInput {
  name: String
  email: String
  password: String
  comments: CommentUpdateManyWithoutUserInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutRentsInput {
  update: UserUpdateWithoutRentsDataInput!
  create: UserCreateWithoutRentsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  rents_every: RentWhereInput
  rents_some: RentWhereInput
  rents_none: RentWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Vote {
  id: ID!
  comment: Comment!
  user: User!
  usefull: Boolean
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  id: ID
  comment: CommentCreateOneWithoutVotesInput!
  user: UserCreateOneInput!
  usefull: Boolean
}

input VoteCreateManyWithoutCommentInput {
  create: [VoteCreateWithoutCommentInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutCommentInput {
  id: ID
  user: UserCreateOneInput!
  usefull: Boolean
}

type VoteEdge {
  node: Vote!
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  usefull_ASC
  usefull_DESC
}

type VotePreviousValues {
  id: ID!
  usefull: Boolean
}

input VoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  usefull: Boolean
  usefull_not: Boolean
  AND: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
  AND: [VoteSubscriptionWhereInput!]
  OR: [VoteSubscriptionWhereInput!]
  NOT: [VoteSubscriptionWhereInput!]
}

input VoteUpdateInput {
  comment: CommentUpdateOneRequiredWithoutVotesInput
  user: UserUpdateOneRequiredInput
  usefull: Boolean
}

input VoteUpdateManyDataInput {
  usefull: Boolean
}

input VoteUpdateManyMutationInput {
  usefull: Boolean
}

input VoteUpdateManyWithoutCommentInput {
  create: [VoteCreateWithoutCommentInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutCommentInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutCommentInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyWithWhereNestedInput {
  where: VoteScalarWhereInput!
  data: VoteUpdateManyDataInput!
}

input VoteUpdateWithoutCommentDataInput {
  user: UserUpdateOneRequiredInput
  usefull: Boolean
}

input VoteUpdateWithWhereUniqueWithoutCommentInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutCommentDataInput!
}

input VoteUpsertWithWhereUniqueWithoutCommentInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutCommentDataInput!
  create: VoteCreateWithoutCommentInput!
}

input VoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  comment: CommentWhereInput
  user: UserWhereInput
  usefull: Boolean
  usefull_not: Boolean
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
}

input VoteWhereUniqueInput {
  id: ID
}
`
      }
    