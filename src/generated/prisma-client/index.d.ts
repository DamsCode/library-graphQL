// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  book: (where?: BookWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  rent: (where?: RentWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  book: (where: BookWhereUniqueInput) => BookNullablePromise;
  books: (args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Book>;
  booksConnection: (args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BookConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  rent: (where: RentWhereUniqueInput) => RentNullablePromise;
  rents: (args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Rent>;
  rentsConnection: (args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RentConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VoteNullablePromise;
  votes: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vote>;
  votesConnection: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VoteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBook: (data: BookCreateInput) => BookPromise;
  updateBook: (args: {
    data: BookUpdateInput;
    where: BookWhereUniqueInput;
  }) => BookPromise;
  updateManyBooks: (args: {
    data: BookUpdateManyMutationInput;
    where?: BookWhereInput;
  }) => BatchPayloadPromise;
  upsertBook: (args: {
    where: BookWhereUniqueInput;
    create: BookCreateInput;
    update: BookUpdateInput;
  }) => BookPromise;
  deleteBook: (where: BookWhereUniqueInput) => BookPromise;
  deleteManyBooks: (where?: BookWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createRent: (data: RentCreateInput) => RentPromise;
  updateRent: (args: {
    data: RentUpdateInput;
    where: RentWhereUniqueInput;
  }) => RentPromise;
  updateManyRents: (args: {
    data: RentUpdateManyMutationInput;
    where?: RentWhereInput;
  }) => BatchPayloadPromise;
  upsertRent: (args: {
    where: RentWhereUniqueInput;
    create: RentCreateInput;
    update: RentUpdateInput;
  }) => RentPromise;
  deleteRent: (where: RentWhereUniqueInput) => RentPromise;
  deleteManyRents: (where?: RentWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (args: {
    data: VoteUpdateInput;
    where: VoteWhereUniqueInput;
  }) => VotePromise;
  updateManyVotes: (args: {
    data: VoteUpdateManyMutationInput;
    where?: VoteWhereInput;
  }) => BatchPayloadPromise;
  upsertVote: (args: {
    where: VoteWhereUniqueInput;
    create: VoteCreateInput;
    update: VoteUpdateInput;
  }) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  book: (
    where?: BookSubscriptionWhereInput
  ) => BookSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  rent: (
    where?: RentSubscriptionWhereInput
  ) => RentSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "bookeval_ASC"
  | "bookeval_DESC";

export type RentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rentAt_ASC"
  | "rentAt_DESC"
  | "backAt_ASC"
  | "backAt_DESC"
  | "isBack_ASC"
  | "isBack_DESC";

export type VoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "usefull_ASC"
  | "usefull_DESC";

export type BookOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isbn_ASC"
  | "isbn_DESC"
  | "title_ASC"
  | "title_DESC"
  | "editor_ASC"
  | "editor_DESC"
  | "format_ASC"
  | "format_DESC"
  | "language_ASC"
  | "language_DESC"
  | "cover_ASC"
  | "cover_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BookWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  bookeval?: Maybe<Int>;
  bookeval_not?: Maybe<Int>;
  bookeval_in?: Maybe<Int[] | Int>;
  bookeval_not_in?: Maybe<Int[] | Int>;
  bookeval_lt?: Maybe<Int>;
  bookeval_lte?: Maybe<Int>;
  bookeval_gt?: Maybe<Int>;
  bookeval_gte?: Maybe<Int>;
  book?: Maybe<BookWhereInput>;
  user?: Maybe<UserWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface BookWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  isbn?: Maybe<String>;
  isbn_not?: Maybe<String>;
  isbn_in?: Maybe<String[] | String>;
  isbn_not_in?: Maybe<String[] | String>;
  isbn_lt?: Maybe<String>;
  isbn_lte?: Maybe<String>;
  isbn_gt?: Maybe<String>;
  isbn_gte?: Maybe<String>;
  isbn_contains?: Maybe<String>;
  isbn_not_contains?: Maybe<String>;
  isbn_starts_with?: Maybe<String>;
  isbn_not_starts_with?: Maybe<String>;
  isbn_ends_with?: Maybe<String>;
  isbn_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  editor?: Maybe<String>;
  editor_not?: Maybe<String>;
  editor_in?: Maybe<String[] | String>;
  editor_not_in?: Maybe<String[] | String>;
  editor_lt?: Maybe<String>;
  editor_lte?: Maybe<String>;
  editor_gt?: Maybe<String>;
  editor_gte?: Maybe<String>;
  editor_contains?: Maybe<String>;
  editor_not_contains?: Maybe<String>;
  editor_starts_with?: Maybe<String>;
  editor_not_starts_with?: Maybe<String>;
  editor_ends_with?: Maybe<String>;
  editor_not_ends_with?: Maybe<String>;
  format?: Maybe<String>;
  format_not?: Maybe<String>;
  format_in?: Maybe<String[] | String>;
  format_not_in?: Maybe<String[] | String>;
  format_lt?: Maybe<String>;
  format_lte?: Maybe<String>;
  format_gt?: Maybe<String>;
  format_gte?: Maybe<String>;
  format_contains?: Maybe<String>;
  format_not_contains?: Maybe<String>;
  format_starts_with?: Maybe<String>;
  format_not_starts_with?: Maybe<String>;
  format_ends_with?: Maybe<String>;
  format_not_ends_with?: Maybe<String>;
  language?: Maybe<String>;
  language_not?: Maybe<String>;
  language_in?: Maybe<String[] | String>;
  language_not_in?: Maybe<String[] | String>;
  language_lt?: Maybe<String>;
  language_lte?: Maybe<String>;
  language_gt?: Maybe<String>;
  language_gte?: Maybe<String>;
  language_contains?: Maybe<String>;
  language_not_contains?: Maybe<String>;
  language_starts_with?: Maybe<String>;
  language_not_starts_with?: Maybe<String>;
  language_ends_with?: Maybe<String>;
  language_not_ends_with?: Maybe<String>;
  cover?: Maybe<String>;
  cover_not?: Maybe<String>;
  cover_in?: Maybe<String[] | String>;
  cover_not_in?: Maybe<String[] | String>;
  cover_lt?: Maybe<String>;
  cover_lte?: Maybe<String>;
  cover_gt?: Maybe<String>;
  cover_gte?: Maybe<String>;
  cover_contains?: Maybe<String>;
  cover_not_contains?: Maybe<String>;
  cover_starts_with?: Maybe<String>;
  cover_not_starts_with?: Maybe<String>;
  cover_ends_with?: Maybe<String>;
  cover_not_ends_with?: Maybe<String>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  rent_every?: Maybe<RentWhereInput>;
  rent_some?: Maybe<RentWhereInput>;
  rent_none?: Maybe<RentWhereInput>;
  AND?: Maybe<BookWhereInput[] | BookWhereInput>;
  OR?: Maybe<BookWhereInput[] | BookWhereInput>;
  NOT?: Maybe<BookWhereInput[] | BookWhereInput>;
}

export interface RentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  book?: Maybe<BookWhereInput>;
  user?: Maybe<UserWhereInput>;
  rentAt?: Maybe<DateTimeInput>;
  rentAt_not?: Maybe<DateTimeInput>;
  rentAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  rentAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  rentAt_lt?: Maybe<DateTimeInput>;
  rentAt_lte?: Maybe<DateTimeInput>;
  rentAt_gt?: Maybe<DateTimeInput>;
  rentAt_gte?: Maybe<DateTimeInput>;
  backAt?: Maybe<DateTimeInput>;
  backAt_not?: Maybe<DateTimeInput>;
  backAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  backAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  backAt_lt?: Maybe<DateTimeInput>;
  backAt_lte?: Maybe<DateTimeInput>;
  backAt_gt?: Maybe<DateTimeInput>;
  backAt_gte?: Maybe<DateTimeInput>;
  isBack?: Maybe<Boolean>;
  isBack_not?: Maybe<Boolean>;
  AND?: Maybe<RentWhereInput[] | RentWhereInput>;
  OR?: Maybe<RentWhereInput[] | RentWhereInput>;
  NOT?: Maybe<RentWhereInput[] | RentWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  rent_every?: Maybe<RentWhereInput>;
  rent_some?: Maybe<RentWhereInput>;
  rent_none?: Maybe<RentWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface VoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  comment?: Maybe<CommentWhereInput>;
  user?: Maybe<UserWhereInput>;
  usefull?: Maybe<Boolean>;
  usefull_not?: Maybe<Boolean>;
  AND?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  OR?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  NOT?: Maybe<VoteWhereInput[] | VoteWhereInput>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type VoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BookCreateInput {
  id?: Maybe<ID_Input>;
  isbn: String;
  title: String;
  authors?: Maybe<BookCreateauthorsInput>;
  editor: String;
  format: String;
  language: String;
  cover: String;
  comments?: Maybe<CommentCreateManyWithoutBookInput>;
  rent?: Maybe<RentCreateManyWithoutBookInput>;
}

export interface BookCreateauthorsInput {
  set?: Maybe<String[] | String>;
}

export interface CommentCreateManyWithoutBookInput {
  create?: Maybe<
    CommentCreateWithoutBookInput[] | CommentCreateWithoutBookInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutBookInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  comment: String;
  bookeval?: Maybe<Int>;
  user: UserCreateOneWithoutCommentsInput;
  votes?: Maybe<VoteCreateManyWithoutCommentInput>;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  rent?: Maybe<RentCreateManyWithoutUserInput>;
}

export interface RentCreateManyWithoutUserInput {
  create?: Maybe<RentCreateWithoutUserInput[] | RentCreateWithoutUserInput>;
  connect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
}

export interface RentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  book: BookCreateOneWithoutRentInput;
  rentAt: DateTimeInput;
  backAt?: Maybe<DateTimeInput>;
  isBack?: Maybe<Boolean>;
}

export interface BookCreateOneWithoutRentInput {
  create?: Maybe<BookCreateWithoutRentInput>;
  connect?: Maybe<BookWhereUniqueInput>;
}

export interface BookCreateWithoutRentInput {
  id?: Maybe<ID_Input>;
  isbn: String;
  title: String;
  authors?: Maybe<BookCreateauthorsInput>;
  editor: String;
  format: String;
  language: String;
  cover: String;
  comments?: Maybe<CommentCreateManyWithoutBookInput>;
}

export interface VoteCreateManyWithoutCommentInput {
  create?: Maybe<
    VoteCreateWithoutCommentInput[] | VoteCreateWithoutCommentInput
  >;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface VoteCreateWithoutCommentInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  usefull?: Maybe<Boolean>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  rent?: Maybe<RentCreateManyWithoutUserInput>;
}

export interface CommentCreateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  comment: String;
  bookeval?: Maybe<Int>;
  book: BookCreateOneWithoutCommentsInput;
  votes?: Maybe<VoteCreateManyWithoutCommentInput>;
}

export interface BookCreateOneWithoutCommentsInput {
  create?: Maybe<BookCreateWithoutCommentsInput>;
  connect?: Maybe<BookWhereUniqueInput>;
}

export interface BookCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  isbn: String;
  title: String;
  authors?: Maybe<BookCreateauthorsInput>;
  editor: String;
  format: String;
  language: String;
  cover: String;
  rent?: Maybe<RentCreateManyWithoutBookInput>;
}

export interface RentCreateManyWithoutBookInput {
  create?: Maybe<RentCreateWithoutBookInput[] | RentCreateWithoutBookInput>;
  connect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
}

export interface RentCreateWithoutBookInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutRentInput;
  rentAt: DateTimeInput;
  backAt?: Maybe<DateTimeInput>;
  isBack?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutRentInput {
  create?: Maybe<UserCreateWithoutRentInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutRentInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
}

export interface BookUpdateInput {
  isbn?: Maybe<String>;
  title?: Maybe<String>;
  authors?: Maybe<BookUpdateauthorsInput>;
  editor?: Maybe<String>;
  format?: Maybe<String>;
  language?: Maybe<String>;
  cover?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutBookInput>;
  rent?: Maybe<RentUpdateManyWithoutBookInput>;
}

export interface BookUpdateauthorsInput {
  set?: Maybe<String[] | String>;
}

export interface CommentUpdateManyWithoutBookInput {
  create?: Maybe<
    CommentCreateWithoutBookInput[] | CommentCreateWithoutBookInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutBookInput[]
    | CommentUpdateWithWhereUniqueWithoutBookInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutBookInput[]
    | CommentUpsertWithWhereUniqueWithoutBookInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutBookInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutBookDataInput;
}

export interface CommentUpdateWithoutBookDataInput {
  title?: Maybe<String>;
  comment?: Maybe<String>;
  bookeval?: Maybe<Int>;
  user?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  votes?: Maybe<VoteUpdateManyWithoutCommentInput>;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  rent?: Maybe<RentUpdateManyWithoutUserInput>;
}

export interface RentUpdateManyWithoutUserInput {
  create?: Maybe<RentCreateWithoutUserInput[] | RentCreateWithoutUserInput>;
  delete?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  connect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  set?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  disconnect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  update?: Maybe<
    | RentUpdateWithWhereUniqueWithoutUserInput[]
    | RentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | RentUpsertWithWhereUniqueWithoutUserInput[]
    | RentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
  updateMany?: Maybe<
    RentUpdateManyWithWhereNestedInput[] | RentUpdateManyWithWhereNestedInput
  >;
}

export interface RentUpdateWithWhereUniqueWithoutUserInput {
  where: RentWhereUniqueInput;
  data: RentUpdateWithoutUserDataInput;
}

export interface RentUpdateWithoutUserDataInput {
  book?: Maybe<BookUpdateOneRequiredWithoutRentInput>;
  rentAt?: Maybe<DateTimeInput>;
  backAt?: Maybe<DateTimeInput>;
  isBack?: Maybe<Boolean>;
}

export interface BookUpdateOneRequiredWithoutRentInput {
  create?: Maybe<BookCreateWithoutRentInput>;
  update?: Maybe<BookUpdateWithoutRentDataInput>;
  upsert?: Maybe<BookUpsertWithoutRentInput>;
  connect?: Maybe<BookWhereUniqueInput>;
}

export interface BookUpdateWithoutRentDataInput {
  isbn?: Maybe<String>;
  title?: Maybe<String>;
  authors?: Maybe<BookUpdateauthorsInput>;
  editor?: Maybe<String>;
  format?: Maybe<String>;
  language?: Maybe<String>;
  cover?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutBookInput>;
}

export interface BookUpsertWithoutRentInput {
  update: BookUpdateWithoutRentDataInput;
  create: BookCreateWithoutRentInput;
}

export interface RentUpsertWithWhereUniqueWithoutUserInput {
  where: RentWhereUniqueInput;
  update: RentUpdateWithoutUserDataInput;
  create: RentCreateWithoutUserInput;
}

export interface RentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  rentAt?: Maybe<DateTimeInput>;
  rentAt_not?: Maybe<DateTimeInput>;
  rentAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  rentAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  rentAt_lt?: Maybe<DateTimeInput>;
  rentAt_lte?: Maybe<DateTimeInput>;
  rentAt_gt?: Maybe<DateTimeInput>;
  rentAt_gte?: Maybe<DateTimeInput>;
  backAt?: Maybe<DateTimeInput>;
  backAt_not?: Maybe<DateTimeInput>;
  backAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  backAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  backAt_lt?: Maybe<DateTimeInput>;
  backAt_lte?: Maybe<DateTimeInput>;
  backAt_gt?: Maybe<DateTimeInput>;
  backAt_gte?: Maybe<DateTimeInput>;
  isBack?: Maybe<Boolean>;
  isBack_not?: Maybe<Boolean>;
  AND?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
  OR?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
  NOT?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
}

export interface RentUpdateManyWithWhereNestedInput {
  where: RentScalarWhereInput;
  data: RentUpdateManyDataInput;
}

export interface RentUpdateManyDataInput {
  rentAt?: Maybe<DateTimeInput>;
  backAt?: Maybe<DateTimeInput>;
  isBack?: Maybe<Boolean>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface VoteUpdateManyWithoutCommentInput {
  create?: Maybe<
    VoteCreateWithoutCommentInput[] | VoteCreateWithoutCommentInput
  >;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutCommentInput[]
    | VoteUpdateWithWhereUniqueWithoutCommentInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutCommentInput[]
    | VoteUpsertWithWhereUniqueWithoutCommentInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  updateMany?: Maybe<
    VoteUpdateManyWithWhereNestedInput[] | VoteUpdateManyWithWhereNestedInput
  >;
}

export interface VoteUpdateWithWhereUniqueWithoutCommentInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutCommentDataInput;
}

export interface VoteUpdateWithoutCommentDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  usefull?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  rent?: Maybe<RentUpdateManyWithoutUserInput>;
}

export interface CommentUpdateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutUserInput[]
    | CommentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutUserInput[]
    | CommentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutUserDataInput;
}

export interface CommentUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  comment?: Maybe<String>;
  bookeval?: Maybe<Int>;
  book?: Maybe<BookUpdateOneRequiredWithoutCommentsInput>;
  votes?: Maybe<VoteUpdateManyWithoutCommentInput>;
}

export interface BookUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<BookCreateWithoutCommentsInput>;
  update?: Maybe<BookUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<BookUpsertWithoutCommentsInput>;
  connect?: Maybe<BookWhereUniqueInput>;
}

export interface BookUpdateWithoutCommentsDataInput {
  isbn?: Maybe<String>;
  title?: Maybe<String>;
  authors?: Maybe<BookUpdateauthorsInput>;
  editor?: Maybe<String>;
  format?: Maybe<String>;
  language?: Maybe<String>;
  cover?: Maybe<String>;
  rent?: Maybe<RentUpdateManyWithoutBookInput>;
}

export interface RentUpdateManyWithoutBookInput {
  create?: Maybe<RentCreateWithoutBookInput[] | RentCreateWithoutBookInput>;
  delete?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  connect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  set?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  disconnect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  update?: Maybe<
    | RentUpdateWithWhereUniqueWithoutBookInput[]
    | RentUpdateWithWhereUniqueWithoutBookInput
  >;
  upsert?: Maybe<
    | RentUpsertWithWhereUniqueWithoutBookInput[]
    | RentUpsertWithWhereUniqueWithoutBookInput
  >;
  deleteMany?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
  updateMany?: Maybe<
    RentUpdateManyWithWhereNestedInput[] | RentUpdateManyWithWhereNestedInput
  >;
}

export interface RentUpdateWithWhereUniqueWithoutBookInput {
  where: RentWhereUniqueInput;
  data: RentUpdateWithoutBookDataInput;
}

export interface RentUpdateWithoutBookDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutRentInput>;
  rentAt?: Maybe<DateTimeInput>;
  backAt?: Maybe<DateTimeInput>;
  isBack?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutRentInput {
  create?: Maybe<UserCreateWithoutRentInput>;
  update?: Maybe<UserUpdateWithoutRentDataInput>;
  upsert?: Maybe<UserUpsertWithoutRentInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutRentDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutRentInput {
  update: UserUpdateWithoutRentDataInput;
  create: UserCreateWithoutRentInput;
}

export interface RentUpsertWithWhereUniqueWithoutBookInput {
  where: RentWhereUniqueInput;
  update: RentUpdateWithoutBookDataInput;
  create: RentCreateWithoutBookInput;
}

export interface BookUpsertWithoutCommentsInput {
  update: BookUpdateWithoutCommentsDataInput;
  create: BookCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutUserDataInput;
  create: CommentCreateWithoutUserInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  comment?: Maybe<String>;
  comment_not?: Maybe<String>;
  comment_in?: Maybe<String[] | String>;
  comment_not_in?: Maybe<String[] | String>;
  comment_lt?: Maybe<String>;
  comment_lte?: Maybe<String>;
  comment_gt?: Maybe<String>;
  comment_gte?: Maybe<String>;
  comment_contains?: Maybe<String>;
  comment_not_contains?: Maybe<String>;
  comment_starts_with?: Maybe<String>;
  comment_not_starts_with?: Maybe<String>;
  comment_ends_with?: Maybe<String>;
  comment_not_ends_with?: Maybe<String>;
  bookeval?: Maybe<Int>;
  bookeval_not?: Maybe<Int>;
  bookeval_in?: Maybe<Int[] | Int>;
  bookeval_not_in?: Maybe<Int[] | Int>;
  bookeval_lt?: Maybe<Int>;
  bookeval_lte?: Maybe<Int>;
  bookeval_gt?: Maybe<Int>;
  bookeval_gte?: Maybe<Int>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  title?: Maybe<String>;
  comment?: Maybe<String>;
  bookeval?: Maybe<Int>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface VoteUpsertWithWhereUniqueWithoutCommentInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutCommentDataInput;
  create: VoteCreateWithoutCommentInput;
}

export interface VoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  usefull?: Maybe<Boolean>;
  usefull_not?: Maybe<Boolean>;
  AND?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  OR?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  NOT?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface VoteUpdateManyWithWhereNestedInput {
  where: VoteScalarWhereInput;
  data: VoteUpdateManyDataInput;
}

export interface VoteUpdateManyDataInput {
  usefull?: Maybe<Boolean>;
}

export interface CommentUpsertWithWhereUniqueWithoutBookInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutBookDataInput;
  create: CommentCreateWithoutBookInput;
}

export interface BookUpdateManyMutationInput {
  isbn?: Maybe<String>;
  title?: Maybe<String>;
  authors?: Maybe<BookUpdateauthorsInput>;
  editor?: Maybe<String>;
  format?: Maybe<String>;
  language?: Maybe<String>;
  cover?: Maybe<String>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  comment: String;
  bookeval?: Maybe<Int>;
  book: BookCreateOneWithoutCommentsInput;
  user: UserCreateOneWithoutCommentsInput;
  votes?: Maybe<VoteCreateManyWithoutCommentInput>;
}

export interface CommentUpdateInput {
  title?: Maybe<String>;
  comment?: Maybe<String>;
  bookeval?: Maybe<Int>;
  book?: Maybe<BookUpdateOneRequiredWithoutCommentsInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  votes?: Maybe<VoteUpdateManyWithoutCommentInput>;
}

export interface CommentUpdateManyMutationInput {
  title?: Maybe<String>;
  comment?: Maybe<String>;
  bookeval?: Maybe<Int>;
}

export interface RentCreateInput {
  id?: Maybe<ID_Input>;
  book: BookCreateOneWithoutRentInput;
  user: UserCreateOneWithoutRentInput;
  rentAt: DateTimeInput;
  backAt?: Maybe<DateTimeInput>;
  isBack?: Maybe<Boolean>;
}

export interface RentUpdateInput {
  book?: Maybe<BookUpdateOneRequiredWithoutRentInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutRentInput>;
  rentAt?: Maybe<DateTimeInput>;
  backAt?: Maybe<DateTimeInput>;
  isBack?: Maybe<Boolean>;
}

export interface RentUpdateManyMutationInput {
  rentAt?: Maybe<DateTimeInput>;
  backAt?: Maybe<DateTimeInput>;
  isBack?: Maybe<Boolean>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  rent?: Maybe<RentUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface VoteCreateInput {
  id?: Maybe<ID_Input>;
  comment: CommentCreateOneWithoutVotesInput;
  user: UserCreateOneInput;
  usefull?: Maybe<Boolean>;
}

export interface CommentCreateOneWithoutVotesInput {
  create?: Maybe<CommentCreateWithoutVotesInput>;
  connect?: Maybe<CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  comment: String;
  bookeval?: Maybe<Int>;
  book: BookCreateOneWithoutCommentsInput;
  user: UserCreateOneWithoutCommentsInput;
}

export interface VoteUpdateInput {
  comment?: Maybe<CommentUpdateOneRequiredWithoutVotesInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  usefull?: Maybe<Boolean>;
}

export interface CommentUpdateOneRequiredWithoutVotesInput {
  create?: Maybe<CommentCreateWithoutVotesInput>;
  update?: Maybe<CommentUpdateWithoutVotesDataInput>;
  upsert?: Maybe<CommentUpsertWithoutVotesInput>;
  connect?: Maybe<CommentWhereUniqueInput>;
}

export interface CommentUpdateWithoutVotesDataInput {
  title?: Maybe<String>;
  comment?: Maybe<String>;
  bookeval?: Maybe<Int>;
  book?: Maybe<BookUpdateOneRequiredWithoutCommentsInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
}

export interface CommentUpsertWithoutVotesInput {
  update: CommentUpdateWithoutVotesDataInput;
  create: CommentCreateWithoutVotesInput;
}

export interface VoteUpdateManyMutationInput {
  usefull?: Maybe<Boolean>;
}

export interface BookSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BookWhereInput>;
  AND?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
  OR?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
  NOT?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface RentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RentWhereInput>;
  AND?: Maybe<RentSubscriptionWhereInput[] | RentSubscriptionWhereInput>;
  OR?: Maybe<RentSubscriptionWhereInput[] | RentSubscriptionWhereInput>;
  NOT?: Maybe<RentSubscriptionWhereInput[] | RentSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VoteWhereInput>;
  AND?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  OR?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  NOT?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Book {
  id: ID_Output;
  isbn: String;
  title: String;
  authors: String[];
  editor: String;
  format: String;
  language: String;
  cover: String;
}

export interface BookPromise extends Promise<Book>, Fragmentable {
  id: () => Promise<ID_Output>;
  isbn: () => Promise<String>;
  title: () => Promise<String>;
  authors: () => Promise<String[]>;
  editor: () => Promise<String>;
  format: () => Promise<String>;
  language: () => Promise<String>;
  cover: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rent: <T = FragmentableArray<Rent>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BookSubscription
  extends Promise<AsyncIterator<Book>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isbn: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  authors: () => Promise<AsyncIterator<String[]>>;
  editor: () => Promise<AsyncIterator<String>>;
  format: () => Promise<AsyncIterator<String>>;
  language: () => Promise<AsyncIterator<String>>;
  cover: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rent: <T = Promise<AsyncIterator<RentSubscription>>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface BookNullablePromise
  extends Promise<Book | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isbn: () => Promise<String>;
  title: () => Promise<String>;
  authors: () => Promise<String[]>;
  editor: () => Promise<String>;
  format: () => Promise<String>;
  language: () => Promise<String>;
  cover: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rent: <T = FragmentableArray<Rent>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Comment {
  id: ID_Output;
  title?: String;
  comment: String;
  bookeval?: Int;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  comment: () => Promise<String>;
  bookeval: () => Promise<Int>;
  book: <T = BookPromise>() => T;
  user: <T = UserPromise>() => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  comment: () => Promise<AsyncIterator<String>>;
  bookeval: () => Promise<AsyncIterator<Int>>;
  book: <T = BookSubscription>() => T;
  user: <T = UserSubscription>() => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  comment: () => Promise<String>;
  bookeval: () => Promise<Int>;
  book: <T = BookPromise>() => T;
  user: <T = UserPromise>() => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rent: <T = FragmentableArray<Rent>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rent: <T = Promise<AsyncIterator<RentSubscription>>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rent: <T = FragmentableArray<Rent>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Rent {
  id: ID_Output;
  rentAt: DateTimeOutput;
  backAt?: DateTimeOutput;
  isBack?: Boolean;
}

export interface RentPromise extends Promise<Rent>, Fragmentable {
  id: () => Promise<ID_Output>;
  book: <T = BookPromise>() => T;
  user: <T = UserPromise>() => T;
  rentAt: () => Promise<DateTimeOutput>;
  backAt: () => Promise<DateTimeOutput>;
  isBack: () => Promise<Boolean>;
}

export interface RentSubscription
  extends Promise<AsyncIterator<Rent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  book: <T = BookSubscription>() => T;
  user: <T = UserSubscription>() => T;
  rentAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  backAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isBack: () => Promise<AsyncIterator<Boolean>>;
}

export interface RentNullablePromise
  extends Promise<Rent | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  book: <T = BookPromise>() => T;
  user: <T = UserPromise>() => T;
  rentAt: () => Promise<DateTimeOutput>;
  backAt: () => Promise<DateTimeOutput>;
  isBack: () => Promise<Boolean>;
}

export interface Vote {
  id: ID_Output;
  usefull?: Boolean;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  comment: <T = CommentPromise>() => T;
  user: <T = UserPromise>() => T;
  usefull: () => Promise<Boolean>;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  comment: <T = CommentSubscription>() => T;
  user: <T = UserSubscription>() => T;
  usefull: () => Promise<AsyncIterator<Boolean>>;
}

export interface VoteNullablePromise
  extends Promise<Vote | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  comment: <T = CommentPromise>() => T;
  user: <T = UserPromise>() => T;
  usefull: () => Promise<Boolean>;
}

export interface BookConnection {
  pageInfo: PageInfo;
  edges: BookEdge[];
}

export interface BookConnectionPromise
  extends Promise<BookConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookEdge>>() => T;
  aggregate: <T = AggregateBookPromise>() => T;
}

export interface BookConnectionSubscription
  extends Promise<AsyncIterator<BookConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BookEdge {
  node: Book;
  cursor: String;
}

export interface BookEdgePromise extends Promise<BookEdge>, Fragmentable {
  node: <T = BookPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookEdgeSubscription
  extends Promise<AsyncIterator<BookEdge>>,
    Fragmentable {
  node: <T = BookSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBook {
  count: Int;
}

export interface AggregateBookPromise
  extends Promise<AggregateBook>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookSubscription
  extends Promise<AsyncIterator<AggregateBook>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RentConnection {
  pageInfo: PageInfo;
  edges: RentEdge[];
}

export interface RentConnectionPromise
  extends Promise<RentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RentEdge>>() => T;
  aggregate: <T = AggregateRentPromise>() => T;
}

export interface RentConnectionSubscription
  extends Promise<AsyncIterator<RentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRentSubscription>() => T;
}

export interface RentEdge {
  node: Rent;
  cursor: String;
}

export interface RentEdgePromise extends Promise<RentEdge>, Fragmentable {
  node: <T = RentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RentEdgeSubscription
  extends Promise<AsyncIterator<RentEdge>>,
    Fragmentable {
  node: <T = RentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRent {
  count: Int;
}

export interface AggregateRentPromise
  extends Promise<AggregateRent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRentSubscription
  extends Promise<AsyncIterator<AggregateRent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BookSubscriptionPayload {
  mutation: MutationType;
  node: Book;
  updatedFields: String[];
  previousValues: BookPreviousValues;
}

export interface BookSubscriptionPayloadPromise
  extends Promise<BookSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookPreviousValuesPromise>() => T;
}

export interface BookSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookPreviousValuesSubscription>() => T;
}

export interface BookPreviousValues {
  id: ID_Output;
  isbn: String;
  title: String;
  authors: String[];
  editor: String;
  format: String;
  language: String;
  cover: String;
}

export interface BookPreviousValuesPromise
  extends Promise<BookPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isbn: () => Promise<String>;
  title: () => Promise<String>;
  authors: () => Promise<String[]>;
  editor: () => Promise<String>;
  format: () => Promise<String>;
  language: () => Promise<String>;
  cover: () => Promise<String>;
}

export interface BookPreviousValuesSubscription
  extends Promise<AsyncIterator<BookPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isbn: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  authors: () => Promise<AsyncIterator<String[]>>;
  editor: () => Promise<AsyncIterator<String>>;
  format: () => Promise<AsyncIterator<String>>;
  language: () => Promise<AsyncIterator<String>>;
  cover: () => Promise<AsyncIterator<String>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  title?: String;
  comment: String;
  bookeval?: Int;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  comment: () => Promise<String>;
  bookeval: () => Promise<Int>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  comment: () => Promise<AsyncIterator<String>>;
  bookeval: () => Promise<AsyncIterator<Int>>;
}

export interface RentSubscriptionPayload {
  mutation: MutationType;
  node: Rent;
  updatedFields: String[];
  previousValues: RentPreviousValues;
}

export interface RentSubscriptionPayloadPromise
  extends Promise<RentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RentPreviousValuesPromise>() => T;
}

export interface RentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RentPreviousValuesSubscription>() => T;
}

export interface RentPreviousValues {
  id: ID_Output;
  rentAt: DateTimeOutput;
  backAt?: DateTimeOutput;
  isBack?: Boolean;
}

export interface RentPreviousValuesPromise
  extends Promise<RentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rentAt: () => Promise<DateTimeOutput>;
  backAt: () => Promise<DateTimeOutput>;
  isBack: () => Promise<Boolean>;
}

export interface RentPreviousValuesSubscription
  extends Promise<AsyncIterator<RentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rentAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  backAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isBack: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface VotePreviousValues {
  id: ID_Output;
  usefull?: Boolean;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  usefull: () => Promise<Boolean>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  usefull: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Book",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Rent",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
